function [desired_state] = diamond(t, qn)
% DIAMOND trajectory generator for a diamond

% =================== Your code goes here ===================
% You have to set the pos, vel, acc, yaw and yawdot variables
duration = 1.3;
%{d
if t < duration
    X_0 = [0 0 0;...
        0 0 0;...
        0 0 0;...
        1/4 sqrt(2) sqrt(2);...
        0 0 0;...
        0 0 0];
    a = get_interp_weights(X_0,duration);
    X = [1 t t^2 t^3 t^4 t^5;...
        0 1 2*t 3*t^2 4*t^3 5*t^4;...
        0 0 2 6*t 12*t^2 20*t^3]*a;
    pos = X(1,:)';
    vel = X(2,:)';
    acc = X(3,:)';
elseif t < duration*2
    t = t-duration;
    X_0 = [1/4 sqrt(2) sqrt(2);...
        0 0 0;...
        0 0 0;...
        1/2 0 2*sqrt(2);...
        0 0 0;...
        0 0 0];
    a = get_interp_weights(X_0,duration);
    X = [1 t t^2 t^3 t^4 t^5;...
        0 1 2*t 3*t^2 4*t^3 5*t^4;...
        0 0 2 6*t 12*t^2 20*t^3]*a;
    pos = X(1,:)';
    vel = X(2,:)';
    acc = X(3,:)';
elseif t < duration*3
    t = t-duration*2;
    X_0 = [1/2 0 2*sqrt(2);...
        0 0 0;...
        0 0 0;...
        3/4 -sqrt(2) sqrt(2);...
        0 0 0;...
        0 0 0];
    a = get_interp_weights(X_0,duration);
    X = [1 t t^2 t^3 t^4 t^5;...
        0 1 2*t 3*t^2 4*t^3 5*t^4;...
        0 0 2 6*t 12*t^2 20*t^3]*a;
    pos = X(1,:)';
    vel = X(2,:)';
    acc = X(3,:)';
elseif t < duration*4
    t = t-duration*3;
    X_0 = [3/4 -sqrt(2) sqrt(2);...
        0 0 0;...
        0 0 0;...
        1 0 0;...
        0 0 0;...
        0 0 0];
    a = get_interp_weights(X_0,duration);
    X = [1 t t^2 t^3 t^4 t^5;...
        0 1 2*t 3*t^2 4*t^3 5*t^4;...
        0 0 2 6*t 12*t^2 20*t^3]*a;
    pos = X(1,:)';
    vel = X(2,:)';
    acc = X(3,:)';
else
    pos = [1;0;0];
    vel = [0;0;0];
    acc = [0;0;0];
end
%}

yaw = 0;
yawdot = 0;

% =================== Your code ends here ===================

desired_state.pos = pos(:);
desired_state.vel = vel(:);
desired_state.acc = acc(:);
desired_state.yaw = yaw;
desired_state.yawdot = yawdot;

end
